@startuml
    participant ConsumerWorker.Worker
    participant KafkaMessageConsumerManager
    participant KafkaMessageConsumerManager.ServiceProvider
    participant KafkaTopicMessageConsumer
    participant KafkaConsumerBuilder
    participant IConsumer
    participant KafkaTopicMessageConsumer.ServiceProvider
    participant scope.ServiceProvider
    participant Mediator
    collections MessageNotificationHandlers

    activate ConsumerWorker.Worker
    ConsumerWorker.Worker -> KafkaMessageConsumerManager : StartConsumers(cancellationToken)
    deactivate ConsumerWorker.Worker

    activate KafkaMessageConsumerManager
    KafkaMessageConsumerManager -> KafkaMessageConsumerManager : find all messages with notification handlers
    KafkaMessageConsumerManager -> KafkaMessageConsumerManager : find the topics for those messages
    loop each topic with notification handlers
        KafkaMessageConsumerManager -> KafkaMessageConsumerManager.ServiceProvider : GetRequiredService<IKafkaTopicMessageConsumer>
        KafkaMessageConsumerManager <-- KafkaMessageConsumerManager.ServiceProvider : kafkaTopicMessageConsumer
        group new thread
            KafkaMessageConsumerManager -> KafkaTopicMessageConsumer : StartConsuming(topic, cancellationToken)
            deactivate KafkaMessageConsumerManager

            activate KafkaTopicMessageConsumer
            KafkaTopicMessageConsumer -> KafkaConsumerBuilder : build()

            activate KafkaConsumerBuilder
            KafkaTopicMessageConsumer <-- KafkaConsumerBuilder : consumer
            deactivate KafkaConsumerBuilder

            KafkaTopicMessageConsumer -> IConsumer : subscribe(topic)
            activate IConsumer
            loop while no cancellation requested on cancellationToken
                KafkaTopicMessageConsumer -> IConsumer : consume(cancellationToken)
                KafkaTopicMessageConsumer <-- IConsumer : consumeResult
                deactivate IConsumer

                KafkaTopicMessageConsumer -> KafkaTopicMessageConsumer : determine message type
                KafkaTopicMessageConsumer -> KafkaTopicMessageConsumer : use reflection to build MessageNotification

                KafkaTopicMessageConsumer -> KafkaTopicMessageConsumer.ServiceProvider : CreateScope()
                activate KafkaTopicMessageConsumer.ServiceProvider
                KafkaTopicMessageConsumer <-- KafkaTopicMessageConsumer.ServiceProvider : scope
                KafkaTopicMessageConsumer -> scope.ServiceProvider : GetRequiredService<IMediator>
                KafkaTopicMessageConsumer <-- scope.ServiceProvider : mediator
                deactivate KafkaTopicMessageConsumer.ServiceProvider

                KafkaTopicMessageConsumer -> Mediator : send(messageNotification, cancellationToken)
                activate Mediator
                Mediator -> MessageNotificationHandlers : handle(messageNotification, cancellationToken)
                activate MessageNotificationHandlers
                deactivate MessageNotificationHandlers
                deactivate Mediator
            end
        end
        deactivate KafkaTopicMessageConsumer
    end
@enduml